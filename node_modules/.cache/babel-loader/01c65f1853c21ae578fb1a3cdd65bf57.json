{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ibbas\\\\portfolio\\\\src\\\\components\\\\Scramble.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Scramble() {\n  _s();\n\n  const [scramble, setScramble] = useState(); // Scramble content\n\n  useEffect(() => {\n    generateScramble();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scramble\",\n    onClick: () => generateScramble(),\n    children: scramble\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this); //Generates compvare scramble sequence of length 'givenLength'\n\n  function generateScramble() {\n    var scramble = \"\";\n    var length = 15;\n    var turns = [[\"U\", \"U'\", \"U2\"], [\"L\", \"L'\", \"L2\"], [\"F\", \"F'\", \"F2\"], [\"R\", \"R'\", \"R2\"], [\"B\", \"B'\", \"B2\"], [\"D\", \"D'\", \"D2\"]]; //Generates intial turn\n\n    var letterIndex = rand(0, 6);\n    var typeIndex = rand(0, 3); //Adds chosen turn to scramble and generates next turn\n\n    for (var i = 0; i < length; i++) {\n      scramble = scramble + \" \" + turns[letterIndex][typeIndex];\n      letterIndex = randExc(0, 6, letterIndex);\n      typeIndex = rand(0, 3);\n    }\n\n    console.log(\"called\");\n    setScramble(scramble);\n  } //Generate random number (min to max-1)\n\n\n  function rand(min, max) {\n    var randomNum = Math.random() * (max - min) + min;\n    return Math.floor(randomNum);\n  } //Generate random number (min to max-1) excluding 'exclude'\n\n\n  function randExc(min, max, exclude) {\n    var randomNum = Math.floor(Math.random() * (max - min) + min);\n\n    while (randomNum === exclude) {\n      randomNum = Math.floor(Math.random() * (max - min) + min);\n    }\n\n    return randomNum;\n  }\n}\n\n_s(Scramble, \"r1+2+p/KqjjgAm3XWQ7TfcHXeP8=\");\n\n_c = Scramble;\nexport default Scramble;\n\nvar _c;\n\n$RefreshReg$(_c, \"Scramble\");","map":{"version":3,"sources":["C:/Users/ibbas/portfolio/src/components/Scramble.js"],"names":["useState","useEffect","Scramble","scramble","setScramble","generateScramble","length","turns","letterIndex","rand","typeIndex","i","randExc","console","log","min","max","randomNum","Math","random","floor","exclude"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAEhB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,EAAxC,CAFgB,CAE4B;;AAE5CC,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,gBAAgB;AACnB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAE,MAAMA,gBAAgB,EAAzD;AAAA,cAA8DF;AAA9D;AAAA;AAAA;AAAA;AAAA,UADJ,CARgB,CAahB;;AACA,WAASE,gBAAT,GACA;AACI,QAAIF,QAAQ,GAAG,EAAf;AACA,QAAIG,MAAM,GAAG,EAAb;AACA,QAAIC,KAAK,GAAG,CAAC,CAAC,GAAD,EAAK,IAAL,EAAU,IAAV,CAAD,EACA,CAAC,GAAD,EAAK,IAAL,EAAU,IAAV,CADA,EAEA,CAAC,GAAD,EAAK,IAAL,EAAU,IAAV,CAFA,EAGA,CAAC,GAAD,EAAK,IAAL,EAAU,IAAV,CAHA,EAIA,CAAC,GAAD,EAAK,IAAL,EAAU,IAAV,CAJA,EAKA,CAAC,GAAD,EAAK,IAAL,EAAU,IAAV,CALA,CAAZ,CAHJ,CAUI;;AACA,QAAIC,WAAW,GAAGC,IAAI,CAAC,CAAD,EAAG,CAAH,CAAtB;AACA,QAAIC,SAAS,GAAGD,IAAI,CAAC,CAAD,EAAG,CAAH,CAApB,CAZJ,CAcI;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAACL,MAAlB,EAA0BK,CAAC,EAA3B,EACA;AACIR,MAAAA,QAAQ,GAAGA,QAAQ,GAAE,GAAV,GAAcI,KAAK,CAACC,WAAD,CAAL,CAAmBE,SAAnB,CAAzB;AAEAF,MAAAA,WAAW,GAAGI,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAOJ,WAAP,CAArB;AACAE,MAAAA,SAAS,GAAGD,IAAI,CAAC,CAAD,EAAG,CAAH,CAAhB;AAEH;;AACDI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAV,IAAAA,WAAW,CAACD,QAAD,CAAX;AACH,GAxCe,CA0ChB;;;AACA,WAASM,IAAT,CAAcM,GAAd,EAAmBC,GAAnB,EACA;AACI,QAAIC,SAAS,GAAGC,IAAI,CAACC,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,IAA8BA,GAA9C;AACA,WAAOG,IAAI,CAACE,KAAL,CAAWH,SAAX,CAAP;AACH,GA/Ce,CAiDhB;;;AACA,WAASL,OAAT,CAAiBG,GAAjB,EAAsBC,GAAtB,EAA2BK,OAA3B,EACA;AACI,QAAIJ,SAAS,GAAGC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACC,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAhB;;AACA,WAAOE,SAAS,KAAGI,OAAnB,EACA;AACIJ,MAAAA,SAAS,GAAGC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACC,MAAL,MAAiBH,GAAG,GAAGD,GAAvB,IAA8BA,GAAzC,CAAZ;AACH;;AACD,WAAOE,SAAP;AACH;AACJ;;GA3DQf,Q;;KAAAA,Q;AA6DT,eAAeA,QAAf","sourcesContent":["import {useState, useEffect} from \"react\";\r\n\r\nfunction Scramble() {\r\n\r\n    const [scramble, setScramble] = useState(); // Scramble content\r\n\r\n    useEffect(() => {\r\n        generateScramble();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"scramble\" onClick={() => generateScramble()}>{scramble}</div>\r\n    )\r\n\r\n    \r\n    //Generates compvare scramble sequence of length 'givenLength'\r\n    function generateScramble ()\r\n    {\r\n        var scramble = \"\";\r\n        var length = 15;\r\n        var turns = [[\"U\",\"U'\",\"U2\"],\r\n                    [\"L\",\"L'\",\"L2\"],\r\n                    [\"F\",\"F'\",\"F2\"],\r\n                    [\"R\",\"R'\",\"R2\"],\r\n                    [\"B\",\"B'\",\"B2\"],\r\n                    [\"D\",\"D'\",\"D2\"]];\r\n\r\n        //Generates intial turn\r\n        var letterIndex = rand(0,6);\r\n        var typeIndex = rand(0,3);\r\n\r\n        //Adds chosen turn to scramble and generates next turn\r\n        for (var i = 0; i<length; i++)\r\n        {\r\n            scramble = scramble +\" \"+turns[letterIndex][typeIndex];\r\n\r\n            letterIndex = randExc(0, 6, letterIndex);\r\n            typeIndex = rand(0,3);\r\n\r\n        }\r\n        console.log(\"called\");\r\n        setScramble(scramble);\r\n    }\r\n\r\n    //Generate random number (min to max-1)\r\n    function rand(min, max) \r\n    {  \r\n        var randomNum = Math.random() * (max - min) + min;  \r\n        return Math.floor(randomNum);\r\n    }\r\n\r\n    //Generate random number (min to max-1) excluding 'exclude'\r\n    function randExc(min, max, exclude) \r\n    {  \r\n        var randomNum = Math.floor(Math.random() * (max - min) + min);  \r\n        while (randomNum===exclude)\r\n        {\r\n            randomNum = Math.floor(Math.random() * (max - min) + min); \r\n        }\r\n        return(randomNum);\r\n    }\r\n}\r\n\r\nexport default Scramble;"]},"metadata":{},"sourceType":"module"}